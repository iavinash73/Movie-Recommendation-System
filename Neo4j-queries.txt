
:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///users.csv' AS row
FIELDTERMINATOR '|'
CREATE (:Users {userId: row.userId});


:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///movies.csv' AS row
FIELDTERMINATOR '|'
CREATE (:Movies {movieId: row.movieId, title: row.title, rating_mean: row.rating_mean});



:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///genres.csv' AS row
FIELDTERMINATOR '|'
CREATE (:Genres {genres: row.genres});


CREATE INDEX ON :Users(userId);
CREATE INDEX ON :Movies(movieId);


:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///users_movies.csv' AS row
FIELDTERMINATOR '|'
MATCH (user:Users {userId: row.userId})
MATCH (movie:Movies {movieId: row.movieId})
MERGE (user)-[:WATCHED {rating: row.rating}]->(movie);


:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///users_genres.csv' AS row
FIELDTERMINATOR '|'
MATCH (user:Users {userId: row.userId})
MATCH (genres:Genres {genres: row.genre})
MERGE (user)-[:FAVORITE]->(genres);


:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///movies_genres.csv' AS row
FIELDTERMINATOR '|'
MATCH (movie:Movies {movieId: row.movieId})
MATCH (genres:Genres {genres: row.genres})
MERGE (movie)-[:GENRES]->(genres);


:auto USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM 'file:///movies_similarity.csv' AS row
FIELDTERMINATOR '|'
MATCH (movie1:Movies {movieId: row.movieId})
MATCH (movie2:Movies {movieId: row.sim_movieId})
MERGE (movie1)-[:SIMILAR {relevance: row.relevance}]->(movie2);





[


     MATCH path = (u:Users)-[:WATCHED]->(m1:Movies)
     WHERE u.userId =~'4' 
     RETURN u.userId, m1.title, m1.rating_mean
 
     MATCH path = (u:Users)-[:FAVORITE]->(g:Genres)
     WHERE u.userId =~'4'
     RETURN u.userId, g.genres

     MATCH path = (u:Users)-[:WATCHED]->(m1:Movies)-[s:SIMILAR]->(m2:Movies)
     WHERE u.userId =~'4'
     RETURN u.userId, m1.title, m2.title, m2.rating_mean

     MATCH path = (u:Users)-[:WATCHED]->(m1:Movies)-[s:SIMILAR]->(m2:Movies),
     (m2)-[:GENRES]->(g:Genres),
     (u)-[:FAVORITE]->(g)
     WHERE u.userId =~'4'
     RETURN u.userId, g.genres, m1.title, m2.title, m2.rating_mean


]



MATCH (u1:Users)-[:WATCHED]->(m3:Movies)
WHERE u1.userId =~'4'
WITH [i in m3.movieId | i] as movies
MATCH path = (u:Users)-[:WATCHED]->(m1:Movies)-[s:SIMILAR]->(m2:Movies),
(m2)-[:GENRES]->(g:Genres),
(u)-[:FAVORITE]->(g)
WHERE u.userId =~'4' and not m2.movieId in movies
RETURN distinct u.userId as userId, g.genres as genres,
m2.title as title, m2.rating_mean as rating
ORDER BY m2.rating_mean descending
LIMIT 5



